" Carl Myers Vim Configuration File
" Feb 2008
" vi: ft=vim
"

" initial author of this bit: John Carrino (carrino@amazon.com)

" Standard vim options
  set nu                    " turn on line numbers by default (set nonu to turn it back off)
  set autoindent            " always set autoindenting on
  set backspace=2           " allow backspacing over everything in insert mode
  set cindent shiftwidth=4  " Same thing with cindent
  set diffopt=filler,iwhite " keep files synced and ignore whitespace
  set expandtab             " Get rid of tabs altogether and replace with spaces
  set foldcolumn=2          " set a column incase we need it
  set foldlevel=0           " show contents of all folds
  set foldmethod=indent     " use indent unless overridden
  set guioptions-=m         " Remove menu from the gui
  set guioptions-=T         " Remove toolbar
  set hidden                " hide buffers instead of closing
  set history=50            " keep 500 lines of command line history
  set ignorecase            " Do case insensitive matching
  set incsearch             " Incremental search
  set laststatus=2          " always have status bar
  set linebreak             " This displays long lines as wrapped at word boundries
  set matchtime=10          " Time to flash the brack with showmatch
  set nobackup              " Don't keep a backup file
  set nocompatible          " Use Vim defaults (much better!)
  set nofen                 " disable folds
  set notimeout             " i like to be pokey
  set nottimeout            " take as long as i like to type commands
  set ruler                 " the ruler on the bottom is useful
  set scrolloff=10          " dont let the curser get too close to the edge
  set shiftwidth=4          " Set indention level to be the same as softtabstop
  set showcmd               " Show (partial) command in status line.
  set showmatch             " Show matching brackets.
  set softtabstop=4         " Why are tabs so big?  This fixes it
  set textwidth=0           " Don't wrap words by default
  set textwidth=80          " This wraps a line with a break when you reach 80 chars
  set timeoutlen=10000      " Time to wait for a map sequence to complete
  set ttimeoutlen=10000     " time to wait for a key code to complete
  set virtualedit=block     " let blocks be in virutal edit mode
  set wildmenu              " This is used with wildmode(full) to cycle options

"Longer Set options
  set cscopequickfix=s-,c-,d-,i-,t-,e-,g-,f-   " useful for cscope in quickfix
  set listchars=tab:>-,trail:-                 " prefix tabs with a > and trails with -
  set tags+=./.tags,.tags,../.tags,../../.tags " set ctags
  set whichwrap+=<,>,[,],h,l,~                 " arrow keys can wrap in normal and insert modes
  set wildmode=list:longest,full               " list all options, match to the longest

  set guifont=Courier\ 10\ Pitch\ 10
  
  " Suffixes that get lower priority when doing tab completion for filenames.
  " These are files I am not likely to want to edit or read.
  set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.class
  
" Fix backspace on some systems
" As of 2008-04-02, this was NEEDED for backspace to work when sshed into a
" RHEL3 machine using env improvement VIM.  The term condition might be wrong.
:if &term == "screen"
:  set t_kb=
:  fixdel
:endif

" this is needed for mac terminal.  TODO:  use conditionally?
:if $CMYERS_IS_OSX == "1"
:  set t_kb=
:  fixdel
:endif

"Disabled options
  "set list                    " Make tabs and trails explicit
  "set noswapfile              " this guy is really annoyoing sometimes
  "set wrapmargin=80           " When pasteing, use this, because textwidth becomes 0
                               " wrapmargin inserts breaks if you exceed its value

"Set colorscheme.  This is a black background colorscheme
  colorscheme darkblue

" viminfo options
  " read/write a .viminfo file, don't store more than
  " 50 lines of registers
  set viminfo='20,\"50    


"Set variables for plugins to use

  "vimspell variables
    "don't automatically spell check!
    "let spell_auto_type=""    

  "taglist.vim settings
    set updatetime=1000 "interval to update list window
"
    let Tlist_Auto_Open=1 "Auto open the list window
    let Tlist_Compact_Format=1 
    let Tlist_Enable_Fold_Column=0 "Turn off the fold column for list window
    let Tlist_Exit_OnlyWindow=1 "Exit if list is only window
    let Tlist_File_Fold_Auto_Close=1
    let Tlist_Show_Menu=1 "Show tag menu in gvim
    let Tlist_Use_Right_Window = 1 "put list window on the rigth
"    "maps to close, and open list window
    map <silent> <Leader>tc :TlistClose<CR>
    map <silent> <Leader>to :TlistOpen<CR>

  " LargeFile.vim settings
  " don't run syntax and other expensive things on files larger than NUM megs
  " TODO: install largeFile?
  "let g:LargeFile = 20

"Turn on filetype plugins to automagically
  "Grab commands for particular filetypes.
  "Grabbed from $VIM/ftplugin
  filetype plugin on
  filetype indent on

"Turn on syntax highlighting
syntax on

"When editing a file, make screen display the name of the file you are editing
function! SetTitle()
  let l:title = 'vi: ' . expand('%:t')        
  
  if (l:title != 'vi: __Tag_List__')
    let l:truncTitle = strpart(l:title, 0, 15)
    silent exe '!echo -e -n "\033k' . l:truncTitle . '\033\\"'     
  endif
endfunction

" Run it every time we change buffers
autocmd BufEnter,BufFilePost * call SetTitle()

" settings for home/end to work right in xterm
map OH 0
map OF $
map! OH 0i
map! OF $a

" settings ganked from bernard:
set fo+=q
set foldcolumn=0
set hls
"set nolinebreak
"set smartcase
"set tags=~/.commontags,./tags
"set textwidth=0
"set wildmode=longest:full

set statusline=%f\ %y%{GetStatusEx()}[b:%n]\ %m%r%=(%l/%L,%c%V)\ %P

autocmd BufNewFile,BufRead *.t set syntax=perl


" Function for getting the file format and the encoding for the status line.
function! GetStatusEx()
  let str = ' [' . &fileformat
  if has('multi_byte') && &fileencoding != ''
    let str = str . ':' . &fileencoding
  endif
  let str = str . '] '
  return str
endfunction

" Function for updating tab width of the file you are working on
command! -nargs=1 SetTab :set shiftwidth=<args> tabstop=<args> softtabstop=<args>


" I suq at typing
abbr teh the
abbr hte the


" Setup the status line to display the tagname, if the taglist plugin has been
" loaded
autocmd VimEnter * try
autocmd VimEnter *   call Tlist_Get_Tagname_By_Line()
autocmd VimEnter *   set statusline=%f\ %y%{GetStatusEx()}[b:%n]\ [t:%{Tlist_Get_Tagname_By_Line()}]\ %m%r%=(%l/%L,%c%V)\ %P
autocmd VimEnter *   map <silent> <Leader>tap :TlistAddFilesRecursive . *pm<CR>
autocmd VimEnter * catch
autocmd VimEnter * endt

  " Suffixes that get lower priority when doing tab completion for filenames.
  " These are files I am not likely to want to edit or read.
  set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.class
  

  "vimspell variables
    "don't automatically spell check!
    "let spell_auto_type=""    

    "Map \e to edit a file from the directory of the current buffer
    if has("unix")
      nmap <Leader>e :e <C-R>=expand("%:p:h") . "/"<CR>
    else
      nmap <Leader>,e :e <C-R>=expand("%:p:h") . "\\"<CR>
    endif


  "map commands
    "re-map rcsvers funtions
    map <F5> <Leader>rlog  " Display log buffer selector
    map <F6> <Leader>older " diff with an older version of the file
    map <F7> <Leader>newer " diff with a newer version of the file
    "firefox like tab switching
    map [6^ :tabnext<CR> " Switch to the next tab
    map [5^ :tabprev<CR> " Switch to the prev tab

"Adding mail as a spell checked type, only if in 7.0 >
if (v:version >= 700)
  au FileType mail set spell
endif

source $HOME/.vimjava
source $HOME/.vimaddr

